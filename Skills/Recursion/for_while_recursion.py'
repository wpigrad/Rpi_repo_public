#####################################
# for vs while vs recursion
#####################################
def print_divider():
	print("#"*13)

key_list    = [1,2,3,4,5]

value_list0 = [1,2,3,4,5]			# in order
value_list1 = [5,4,3,2,1]			# out of order
value_list2 = [1,0,0,1,1]			# on/off
value_list3 = [3,4,5,6,7]			# odd/even
value_list4 = [True,False,True,True,False]	# is black
value_list5 = [-1,3,2,-1,-1]			# has ramp

index_list  = [0,1,2,3,4]

my_dict0 = dict(zip(key_list,value_list0))

n = len(index_list)

print_divider()
print(f"key   = {key_list}")
print(f"value = {value_list0}")
print(f"index = {index_list}")
print(f"dictionary = {my_dict0}")
print(f"n = {n}")
print_divider()

#####################################

update = 0
for index in range(0,n,1):
	update = update + 1
print(f"for = {update}")

#####################################

update = 0
while update < n:
	update = update + 1
print(f"while = {update}")

#####################################

def rec_funct0(n):
	if n == 0:
		return 0
	else:
		return rec_funct0(n-1) + 1

# rec_funct(5)
# n = 5
# return rec_funct(4) + 1
# n = 4
# return rec_funct(3) + 1
# n = 3
# return rec_funct(2) + 1
# n = 2
# return rec_funct(1) + 1
# n = 1
# return rec_funct(0) + 1
# n = 0
# return 0

update = 0
update = rec_funct0(n)
print(f"recursion = {update}")

#####################################
print_divider()
#####################################

update = 0
for index in range(0,n,1):
	if value_list2[index] == 1:
		update = update + 1
print("count 1's")
print(value_list2)
print(f"for = {update}")

#####################################

update = 0
index = 0
while index < n:
	if value_list2[index] == 1:
		update = update + 1
	index = index + 1
print("count 1's")
print(value_list2)
print(f"while = {update}")
 
#####################################

def count_ones(value_list):
	# base case: if the list is empty, return 0
	if not value_list:
		return 0
	# recursive case: check the first element and recurse on the rest
	return (1 if value_list[0] == 1 else 0) + count_ones(value_list[1:])

# example usage
result = count_ones(value_list2)
print(f"recursive 1's = {result}")

def count_ones(value_list,n):
	if value_list[n] == 0:
		return 0
	else:
		return rec_funct1(value_list,n-1) + 1

# list = [1,0,0,1,1]
# n = 5
# list[5] = 1
# return rec_funct(list,4) + 1
# n = 4
# list[4] = 0
# return 0
# n = 3
# return rec_funct(list,4) + 1
# n = 2
# return rec_funct(list,4) + 1
# n = 1
# return rec_funct(list,4) + 1
# n = 0
# return 0

update = 0
update = rec_funct1(value_list2,n-1)
print("count 1's")
print(value_list2)
print(f"recursion = {update}")

#####################################

